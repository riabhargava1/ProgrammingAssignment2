## Cache the Inverse of a Matrix:
## This function creates a special "matrix" object that can cache its inverse matrix

 makecachematrix<-function(x=matrix()) {
 inv<-NULL
 set<-function(z) {
 x<<-z
 inv<<-NULL
 }
 get<-function()x
 setInverse<-function(inverse) 
 inv<<-inverse
 getInverse<-function() inv
 list( set=set, get=get,
      setInverse=setInverse,
      getInverse=getInverse)
}

## compute the inverse of the special "matrix" created by 
## makeCacheMatrix above. If the inverse has already been calculated then it should retrieve the inverse from the cache

cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if (!is.null(inv)) {
     message("retrieving cached data")
     return(inv)
     }
 matrix <- x$get()
 inv <- solve(matrix, ...)
 x$setInverse(inv)
 inv
}
      
      
      
      
